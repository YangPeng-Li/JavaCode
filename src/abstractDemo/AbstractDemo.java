package abstractDemo;


/*
 * 抽象类
 * 随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用
 * 类的设计应该保证父类和子类能够共享特征。
 * 有时将一个父类设计的非常抽象，以至于他没有具体的实例这样的类叫做抽象类
 * 
 * 凡是类都有构造器
 * 抽象类有构造器
 * 抽象方法所在类是抽象类
 * 
 * abstract:可以用来修饰类、修饰方法
 * 1）不可以实例化
 * 2）抽象类有构造器，抽象类
 * 3）抽象方法所在的类，一定是抽象类
 * 4）抽象类中可以没有抽象方法
 *	
 *	1）格式没有方法体,包括方法体
 *	2）抽象方法只保留功能，具体执行交给继承抽象类的子类，由子类重写抽象方法
 * 	3）若子类继承抽象类，并重写类所有的抽象方法，则此类是一个“实体类”
 * 	4）若子类继承抽象类，没有重写所有的抽象方法，意味着此类中仍有抽象方法，则此类必须声明为抽象方法
 * 
 * 
 * abstract 不能用来修饰属性、构造器、private final static
 * 
 */

public class AbstractDemo {

}

abstract class Person{
	
}
